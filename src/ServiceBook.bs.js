// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DateFns from "date-fns";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import * as Locale from "date-fns/locale";
import * as Firestore from "firebase/firestore";

import './ServiceBook.css';
;

function ServiceBook(Props) {
  var serviceId = Props.serviceId;
  var match = React.useState(function () {
        return /* Empty */0;
      });
  var setProduct = match[1];
  var product = match[0];
  var match$1 = React.useState(function () {
        return new Date();
      });
  var date = match$1[0];
  var currencySettings = Intl.NumberFormat("es-CO", {
        style: "currency",
        currency: "COP"
      });
  var esOptions = {
    locale: Locale.es
  };
  var month = DateFns.format(date, "MMMM y", esOptions);
  var start = DateFns.startOfMonth(date);
  var startClass = DateFns.isSunday(start) ? "Day-sun" : (
      DateFns.isMonday(start) ? "Day-mon" : (
          DateFns.isTuesday(start) ? "Day-tue" : (
              DateFns.isWednesday(start) ? "Day-wed" : (
                  DateFns.isThursday(start) ? "Day-thu" : (
                      DateFns.isFriday(start) ? "Day-fri" : (
                          DateFns.isSaturday(start) ? "Day-sat" : ""
                        )
                    )
                )
            )
        )
    );
  var dowClass = function (d) {
    var dowStart = Caml_obj.caml_equal(d, start) ? startClass : "";
    if (DateFns.getDayOfYear(d) === DateFns.getDayOfYear(date) && dowStart !== "") {
      return dowStart + " Day-selected";
    } else if (DateFns.getDayOfYear(d) === DateFns.getDayOfYear(date)) {
      return "Day-selected";
    } else {
      return dowStart;
    }
  };
  var days = Belt_Array.makeByU(DateFns.getDaysInMonth(date), (function (i) {
          return DateFns.addDays(start, i);
        }));
  var db = Firestore.getFirestore();
  React.useEffect((function () {
          Curry._1(setProduct, (function (param) {
                  return /* Loading */1;
                }));
          Firestore.getDoc(Firestore.doc(db, "services", serviceId)).then(function (docSnapshot) {
                  if (docSnapshot.exists) {
                    var serverOptions = {
                      serverTimestamps: "none"
                    };
                    var service = docSnapshot.data(serverOptions);
                    Firestore.getDoc(Firestore.doc(db, "experts", service.expert.id)).then(function (docUserSnap) {
                          var schedule = docUserSnap.exists ? docUserSnap.data(serverOptions).schedule : [];
                          Curry._1(setProduct, (function (param) {
                                  return /* Active */{
                                          _0: service,
                                          _1: schedule
                                        };
                                }));
                          return Promise.resolve(undefined);
                        });
                  }
                  return Promise.resolve(undefined);
                }).catch(function (err) {
                console.log(err);
                Curry._1(setProduct, (function (param) {
                        return /* Empty */0;
                      }));
                return Promise.resolve(undefined);
              });
          
        }), []);
  var tmp;
  if (typeof product === "number") {
    tmp = product !== 0 ? "Loading..." : "Service preview and input data";
  } else {
    var item = product._0;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("img", {
              style: {
                borderRadius: "50%",
                flex: "0 1 10%"
              },
              alt: "Expert Picture Url",
              src: item.expert.picture_url
            }), React.createElement("h3", {
              style: {
                flex: "0 1 10%"
              }
            }, item.expert.name), React.createElement("p", {
              style: {
                flex: "1 1 100%"
              }
            }, item.desc), React.createElement("p", {
              style: {
                fontSize: ".8em",
                marginLeft: ".5em",
                flex: "1 1 10%"
              }
            }, "Tiempo " + DateFns.formatDuration({
                  minutes: item.duration
                }, esOptions)), React.createElement("p", {
              style: {
                fontSize: ".8em",
                marginLeft: ".5em",
                flex: "1 1 10%"
              }
            }, "Desde " + currencySettings.format(item.price / 100.0)));
  }
  var tmp$1;
  if (typeof product === "number") {
    tmp$1 = product !== 0 ? "Loading..." : "Available spots";
  } else {
    var duration = product._0.duration;
    var value = Belt_Array.getBy(product._1, (function (param) {
            var l = param.label;
            if (DateFns.isSunday(date)) {
              return l === "Dom";
            } else if (DateFns.isMonday(date)) {
              return l === "Lun";
            } else if (DateFns.isTuesday(date)) {
              return l === "Mar";
            } else if (DateFns.isWednesday(date)) {
              return l === "Mie";
            } else if (DateFns.isThursday(date)) {
              return l === "Jue";
            } else if (DateFns.isFriday(date)) {
              return l === "Vie";
            } else if (DateFns.isSaturday(date)) {
              return l === "Sab";
            } else {
              return false;
            }
          }));
    if (value !== undefined) {
      var from = DateFns.parse(value.from, "H:mm", new Date());
      var to_ = DateFns.millisecondsToMinutes(DateFns.parse(value.to, "H:mm", new Date()).getTime());
      var slots = Caml_int32.div(to_ - DateFns.millisecondsToMinutes(from.getTime()) | 0, duration);
      tmp$1 = Belt_Array.makeBy(slots, (function (i) {
              return React.createElement("button", {
                          key: i.toString(),
                          className: "Slot"
                        }, React.createElement("time", {
                              dateTime: DateFns.format(DateFns.add(from, {
                                        minutes: Math.imul(i, duration)
                                      }), "Pp", esOptions)
                            }, DateFns.format(DateFns.add(from, {
                                      minutes: Math.imul(i, duration)
                                    }), "h:mm bbb", esOptions)));
            }));
    } else {
      tmp$1 = "Service is not available today";
    }
  }
  return React.createElement("main", {
              className: "Book"
            }, React.createElement("article", {
                  className: "Book-card"
                }, React.createElement("aside", {
                      style: {
                        display: "flex",
                        fontSize: ".8em",
                        maxWidth: "calc(30vw - 150px)",
                        padding: "1em",
                        alignItems: "center",
                        flexWrap: "wrap",
                        justifyContent: "space-evenly"
                      }
                    }, tmp), React.createElement("section", {
                      className: "Calendar"
                    }, React.createElement("h3", {
                          className: "Calendar-month"
                        }, month.charAt(0).toUpperCase() + month.slice(1)), React.createElement("div", {
                          className: "Calendar-dow"
                        }, React.createElement("div", undefined, "Dom"), React.createElement("div", undefined, "Lun"), React.createElement("div", undefined, "Mar"), React.createElement("div", undefined, "Mie"), React.createElement("div", undefined, "Jue"), React.createElement("div", undefined, "Vie"), React.createElement("div", undefined, "Sab")), React.createElement("div", {
                          className: "Calendar-grid"
                        }, Belt_Array.map(days, (function (d) {
                                return React.createElement("button", {
                                            key: DateFns.getDayOfYear(d).toString(),
                                            className: dowClass(d)
                                          }, React.createElement("time", {
                                                dateTime: DateFns.format(d, "y-MM-dd", esOptions)
                                              }, DateFns.format(d, "d", esOptions)));
                              })))), React.createElement("aside", {
                      style: {
                        display: "flex",
                        fontSize: ".8em",
                        padding: "1em",
                        alignItems: "center",
                        flexDirection: "column",
                        justifyContent: "space-around"
                      }
                    }, tmp$1), React.createElement("footer", undefined, "Comfirmation")));
}

var make = ServiceBook;

export {
  make ,
  
}
/*  Not a pure module */
