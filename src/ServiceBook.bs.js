// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as DateFns from "date-fns";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int32 from "rescript/lib/es6/caml_int32.js";
import SuccessSvg from "./success.svg";
import * as Locale from "date-fns/locale";
import * as Firestore from "firebase/firestore";
import * as RescriptReactRouter from "@rescript/react/src/RescriptReactRouter.bs.js";
import * as ServiceSearch$RescriptProjectTemplate from "./ServiceSearch.bs.js";

var success = SuccessSvg;

import './ServiceBook.css';
;

var esOptions = {
  locale: Locale.es
};

function esFormatDate(d, f) {
  return DateFns.format(d, f, esOptions);
}

function ServiceBook$ServiceForm(Props) {
  var date = Props.date;
  var isBooked = Props.isBooked;
  var item = Props.item;
  var onBook = Props.onBook;
  var match = React.useState(function () {
        return "";
      });
  var setName = match[1];
  var name = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setEmail = match$1[1];
  var email = match$1[0];
  var match$2 = React.useState(function () {
        return "";
      });
  var setComment = match$2[1];
  var comment = match$2[0];
  var onClick = function (e) {
    e.preventDefault();
    return Curry._1(onBook, {
                state: "PENDING",
                service: item.id,
                expert: item.expert,
                client: {
                  name: name,
                  email: email
                },
                comment: comment,
                date: date,
                time_to: DateFns.format(DateFns.add(date, {
                          minutes: item.duration
                        }), "H:mm", esOptions),
                time_from: DateFns.format(date, "H:mm", esOptions)
              });
  };
  return React.createElement("form", {
              className: "Book-confirmation"
            }, React.createElement("label", undefined, "Nombre"), React.createElement("input", {
                  id: "name",
                  type: "text",
                  value: name,
                  onChange: (function (e) {
                      return Curry._1(setName, (function (param) {
                                    return e.target.value;
                                  }));
                    })
                }), React.createElement("label", undefined, "Email"), React.createElement("input", {
                  id: "email",
                  type: "email",
                  value: email,
                  onChange: (function (e) {
                      return Curry._1(setEmail, (function (param) {
                                    return e.target.value;
                                  }));
                    })
                }), React.createElement("label", undefined, "Comentarios"), React.createElement("textarea", {
                  id: "comment",
                  cols: 30,
                  rows: 5,
                  value: comment,
                  onChange: (function (e) {
                      return Curry._1(setComment, (function (param) {
                                    return e.target.value;
                                  }));
                    })
                }), React.createElement("button", {
                  className: "Book-primary",
                  disabled: !isBooked,
                  onClick: onClick
                }, "Solicitar cita"));
}

var ServiceForm = {
  make: ServiceBook$ServiceForm
};

function ServiceBook$ServiceCalendar(Props) {
  var date = Props.date;
  var onSelect = Props.onSelect;
  var month = DateFns.format(date, "MMMM y", esOptions);
  var start = DateFns.startOfMonth(date);
  var startClass = DateFns.isSunday(start) ? "Day-sun" : (
      DateFns.isMonday(start) ? "Day-mon" : (
          DateFns.isTuesday(start) ? "Day-tue" : (
              DateFns.isWednesday(start) ? "Day-wed" : (
                  DateFns.isThursday(start) ? "Day-thu" : (
                      DateFns.isFriday(start) ? "Day-fri" : (
                          DateFns.isSaturday(start) ? "Day-sat" : ""
                        )
                    )
                )
            )
        )
    );
  var dowClass = function (d) {
    var dowStart = Caml_obj.caml_equal(d, start) ? startClass : "";
    if (DateFns.getDayOfYear(d) === DateFns.getDayOfYear(date) && dowStart !== "") {
      return dowStart + " Day-selected";
    } else if (DateFns.getDayOfYear(d) === DateFns.getDayOfYear(date)) {
      return "Day-selected";
    } else {
      return dowStart;
    }
  };
  var days = Belt_Array.makeByU(DateFns.getDaysInMonth(date), (function (i) {
          return DateFns.addDays(start, i);
        }));
  return React.createElement("section", {
              className: "Calendar"
            }, React.createElement("h3", {
                  className: "Calendar-month"
                }, month.charAt(0).toUpperCase() + month.slice(1)), React.createElement("div", {
                  className: "Calendar-dow"
                }, React.createElement("div", undefined, "Dom"), React.createElement("div", undefined, "Lun"), React.createElement("div", undefined, "Mar"), React.createElement("div", undefined, "Mie"), React.createElement("div", undefined, "Jue"), React.createElement("div", undefined, "Vie"), React.createElement("div", undefined, "Sab")), React.createElement("div", {
                  className: "Calendar-grid"
                }, Belt_Array.map(days, (function (d) {
                        return React.createElement("button", {
                                    key: DateFns.getDayOfYear(d).toString(),
                                    className: dowClass(d),
                                    onClick: (function (param) {
                                        return Curry._1(onSelect, d);
                                      })
                                  }, React.createElement("time", {
                                        dateTime: DateFns.format(d, "y-MM-dd", esOptions)
                                      }, DateFns.format(d, "d", esOptions)));
                      }))));
}

var ServiceCalendar = {
  make: ServiceBook$ServiceCalendar
};

function ServiceBook$ServiceSlots(Props) {
  var date = Props.date;
  var duration = Props.duration;
  var spots = Props.spots;
  var onSelect = Props.onSelect;
  var value = Belt_Array.getBy(spots, (function (param) {
          var l = param.label;
          if (DateFns.isSunday(date)) {
            return l === "Dom";
          } else if (DateFns.isMonday(date)) {
            return l === "Lun";
          } else if (DateFns.isTuesday(date)) {
            return l === "Mar";
          } else if (DateFns.isWednesday(date)) {
            return l === "Mie";
          } else if (DateFns.isThursday(date)) {
            return l === "Jue";
          } else if (DateFns.isFriday(date)) {
            return l === "Vie";
          } else if (DateFns.isSaturday(date)) {
            return l === "Sab";
          } else {
            return false;
          }
        }));
  if (value === undefined) {
    return "Service is not available today";
  }
  var from = DateFns.parse(value.from, "H:mm", date);
  var to_ = DateFns.millisecondsToMinutes(DateFns.parse(value.to, "H:mm", date).getTime());
  var slots = Caml_int32.div(to_ - DateFns.millisecondsToMinutes(from.getTime()) | 0, duration);
  var timeFrom = function (i) {
    return DateFns.add(from, {
                minutes: Math.imul(i, duration)
              });
  };
  return Belt_Array.makeBy(slots, (function (i) {
                return React.createElement("button", {
                            key: i.toString(),
                            className: "Slot" + (
                              DateFns.isEqual(date, timeFrom(i)) ? " Slot-selected" : ""
                            ),
                            onClick: (function (param) {
                                return Curry._1(onSelect, timeFrom(i));
                              })
                          }, React.createElement("time", {
                                dateTime: DateFns.format(timeFrom(i), "Pp", esOptions)
                              }, DateFns.format(timeFrom(i), "h:mm bbb", esOptions)));
              }));
}

var ServiceSlots = {
  make: ServiceBook$ServiceSlots
};

function ServiceBook$ServicePreview(Props) {
  var item = Props.item;
  return React.createElement(React.Fragment, undefined, React.createElement("img", {
                  style: {
                    borderRadius: "50%",
                    flex: "0 1 10%"
                  },
                  alt: "Expert Picture Url",
                  src: item.expert.picture_url
                }), React.createElement("h3", {
                  style: {
                    flex: "0 1 10%"
                  }
                }, item.expert.name), React.createElement("p", {
                  style: {
                    flex: "1 1 100%"
                  }
                }, item.desc), React.createElement("p", {
                  style: {
                    fontSize: ".8em",
                    marginLeft: ".5em",
                    flex: "1 1 10%"
                  }
                }, "Tiempo " + DateFns.formatDuration({
                      minutes: item.duration
                    }, esOptions)), React.createElement("p", {
                  style: {
                    fontSize: ".8em",
                    marginLeft: ".5em",
                    flex: "1 1 10%"
                  }
                }, "Desde " + ServiceSearch$RescriptProjectTemplate.currency(item.price / 100.0)));
}

var ServicePreview = {
  make: ServiceBook$ServicePreview
};

function ServiceBook(Props) {
  var serviceId = Props.serviceId;
  var match = React.useState(function () {
        return /* Empty */0;
      });
  var setProduct = match[1];
  var product = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setBooked = match$1[1];
  var match$2 = React.useState(function () {
        return new Date();
      });
  var setDate = match$2[1];
  var date = match$2[0];
  var db = Firestore.getFirestore();
  var onSelectDate = function (d) {
    Curry._1(setBooked, (function (param) {
            return false;
          }));
    return Curry._1(setDate, (function (param) {
                  return d;
                }));
  };
  var onSelectSlot = function (d) {
    Curry._1(setBooked, (function (param) {
            return true;
          }));
    return Curry._1(setDate, (function (param) {
                  return d;
                }));
  };
  var onBook = function (b) {
    Firestore.setDoc(Firestore.doc(Firestore.collection(db, "bookings")), b);
    return Curry._1(setProduct, (function (param) {
                  return /* Booked */1;
                }));
  };
  var onHomeClick = function (param) {
    return RescriptReactRouter.push("/");
  };
  React.useEffect((function () {
          Curry._1(setProduct, (function (param) {
                  return /* Loading */2;
                }));
          Firestore.getDoc(Firestore.doc(db, "services", serviceId)).then(function (docSnapshot) {
                  if (docSnapshot.exists) {
                    var serverOptions = {
                      serverTimestamps: "none"
                    };
                    var service = docSnapshot.data(serverOptions);
                    Firestore.getDoc(Firestore.doc(db, "experts", service.expert.id)).then(function (docUserSnap) {
                          var schedule = docUserSnap.exists ? docUserSnap.data(serverOptions).schedule : [];
                          Curry._1(setProduct, (function (param) {
                                  return /* Active */{
                                          _0: {
                                            categories: service.categories,
                                            expert: service.expert,
                                            desc: service.desc,
                                            duration: service.duration,
                                            type_: service.type_,
                                            price: service.price,
                                            id: serviceId
                                          },
                                          _1: schedule
                                        };
                                }));
                          return Promise.resolve(undefined);
                        });
                  }
                  return Promise.resolve(undefined);
                }).catch(function (err) {
                console.log(err);
                Curry._1(setProduct, (function (param) {
                        return /* Empty */0;
                      }));
                return Promise.resolve(undefined);
              });
          
        }), []);
  var tmp;
  if (typeof product === "number") {
    switch (product) {
      case /* Empty */0 :
          tmp = "No data available";
          break;
      case /* Booked */1 :
          tmp = React.createElement("section", {
                className: "Booked"
              }, React.createElement("img", {
                    alt: "Success check mark",
                    src: success
                  }), React.createElement("h1", undefined, "Cita creada con éxito"), React.createElement("button", {
                    className: "Booked-outline",
                    onClick: onHomeClick
                  }, "Agenda otra"));
          break;
      case /* Loading */2 :
          tmp = "Loading...";
          break;
      
    }
  } else {
    var item = product._0;
    tmp = React.createElement(React.Fragment, undefined, React.createElement("aside", {
              className: "Book-preview",
              style: {
                display: "flex",
                fontSize: ".8em",
                maxWidth: "calc(30vw - 150px)",
                padding: "1em",
                alignItems: "center",
                flexWrap: "wrap",
                justifyContent: "space-evenly"
              }
            }, React.createElement(ServiceBook$ServicePreview, {
                  item: item
                }), React.createElement(ServiceBook$ServiceForm, {
                  date: date,
                  isBooked: match$1[0],
                  item: item,
                  onBook: onBook
                })), React.createElement(ServiceBook$ServiceCalendar, {
              date: date,
              onSelect: onSelectDate
            }), React.createElement("aside", {
              className: "Book-slots",
              style: {
                display: "flex",
                fontSize: ".8em",
                padding: "1em",
                alignItems: "center",
                flexDirection: "column",
                justifyContent: "flex-start"
              }
            }, React.createElement(ServiceBook$ServiceSlots, {
                  date: date,
                  duration: item.duration,
                  spots: product._1,
                  onSelect: onSelectSlot
                })));
  }
  return React.createElement("main", {
              className: "Book"
            }, React.createElement("article", {
                  className: "Book-card"
                }, tmp));
}

var make = ServiceBook;

export {
  success ,
  esOptions ,
  esFormatDate ,
  ServiceForm ,
  ServiceCalendar ,
  ServiceSlots ,
  ServicePreview ,
  make ,
  
}
/* success Not a pure module */
